//Exercise 1 
//The task is to build an automated data pipeline using Jayvee to process data from a source, then write the processed data into a SQLite database.


pipeline AirportsPipeline {
    // Step 1: Connect the blocks in sequence
    AirportsExtractor -> AirportsTextFileInterpreter -> AirportsCSVInterpreter -> AirportsTableInterpreter -> AirportsLoader;

    // Step 2: Define the data source block
    block AirportsExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
    }

    // Step 3: Interpret the data as plain text
    block AirportsTextFileInterpreter oftype TextFileInterpreter { }

    // Step 4: Interpret the data as CSV
    block AirportsCSVInterpreter oftype CSVInterpreter {
        delimiter: ';';  // Specifies that the data fields are separated by semicolons
    }

    // Step 5: Interpret the CSV as a table with specific columns
    block AirportsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Lfd. Nummer" oftype integer,
            "Name des Flughafens" oftype text,
            "Ort" oftype text,
            "Land" oftype text,
            "IATA" oftype text,
            "ICAO" oftype text,
            "Latitude" oftype decimal,
            "Longitude" oftype decimal,
            "Altitude" oftype integer
        ];
    }

    // Step 6: Load data into SQLite
    block AirportsLoader oftype SQLiteLoader {
        table: "airports";           // The table name in SQLite database
        file: "./airports.sqlite";    // The path for the SQLite database file
    }
}
